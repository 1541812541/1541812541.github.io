<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新markdown语法</title>
      <link href="blog/%E6%96%B0markdown%E8%AF%AD%E6%B3%95/"/>
      <url>blog/%E6%96%B0markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="site-card-group"><a class="site-card" href="https://akilar.top/posts/615e2dec/"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">akilar</span><span class="desc">参考博客</span></div></a><a class="site-card" href="https://www.fomal.cc/posts/2013454d.html"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">fomal</span><span class="desc">参考博客</span></div></a></div>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vrep小车</title>
      <link href="blog/vrep%E5%B0%8F%E8%BD%A6/"/>
      <url>blog/vrep%E5%B0%8F%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="建立车的本体"><a href="#建立车的本体" class="headerlink" title="建立车的本体"></a>建立车的本体</h1><p> 1 点击 add -&gt;primitive shape-&gt;cuboid（长方体）<br> 2 设置长宽高0.2，0.3，0.1（x-0.2,y-0.3,z-0.1）<br> 3 本体上升0.1：<br><img src="https://s1.ax1x.com/2022/07/27/vSLEPU.png" alt=""><br>translation-&gt;z:0.1</p><h2 id="建立车轮1"><a href="#建立车轮1" class="headerlink" title="建立车轮1"></a>建立车轮1</h2><p> 1 点击 add -&gt;primitive shape-&gt;cylinder（圆柱）<br> 2 设置直径0.05，高度0.05（x-0.05,z-0.05）<br> 3 车轮转正：相对于世界x转90度<br><img src="https://s1.ax1x.com/2022/07/27/vSOmY8.png" alt=""><br>rotation-&gt;x-&gt;90<br> 4 将车轮移到正确位置：相对于世界坐标(x-0.13,y-0.1)<br><img src="https://s1.ax1x.com/2022/07/27/vSLEPU.png" alt=""><br>position-&gt;</p><h2 id="使转动关节1和车轮1位置重叠"><a href="#使转动关节1和车轮1位置重叠" class="headerlink" title="使转动关节1和车轮1位置重叠"></a>使转动关节1和车轮1位置重叠</h2><p> 1 按住shift 选中关节1和车轮1<br> 2 position-&gt;应用<br><img src="https://s1.ax1x.com/2022/07/27/vSLEPU.png" alt=""><br>position-&gt;</p><h2 id="修改轮子透明度"><a href="#修改轮子透明度" class="headerlink" title="修改轮子透明度"></a>修改轮子透明度</h2><p> 1 选中轮子，点击左边栏中的搜索标志，点击adjust color-&gt;opacity(透明度)选中设置0.5</p><h2 id="旋转转动关节到正确位置"><a href="#旋转转动关节到正确位置" class="headerlink" title="旋转转动关节到正确位置"></a>旋转转动关节到正确位置</h2><p><img src="https://s1.ax1x.com/2022/07/27/vSOmY8.png" alt=""><br>  1 rotation-&gt;ownframe-&gt;y-&gt;90</p><h2 id="设置轮子名字rfw-右前轮-关节名字rfm-右前关节-车名字car"><a href="#设置轮子名字rfw-右前轮-关节名字rfm-右前关节-车名字car" class="headerlink" title="设置轮子名字rfw(右前轮)关节名字rfm(右前关节)车名字car"></a>设置轮子名字rfw(右前轮)关节名字rfm(右前关节)车名字car</h2><h2 id="rfw-右前轮-装在rfm-右前关节-上：拖一下就可以"><a href="#rfw-右前轮-装在rfm-右前关节-上：拖一下就可以" class="headerlink" title="rfw(右前轮)装在rfm(右前关节)上：拖一下就可以"></a>rfw(右前轮)装在rfm(右前关节)上：拖一下就可以</h2><h2 id="rfm-右前关节-装在车（car）上"><a href="#rfm-右前关节-装在车（car）上" class="headerlink" title="rfm(右前关节)装在车（car）上"></a>rfm(右前关节)装在车（car）上</h2><h2 id="给关节使能电动"><a href="#给关节使能电动" class="headerlink" title="给关节使能电动"></a>给关节使能电动</h2><p> 1 点击转动关节1-&gt;最下方 show dynamic-&gt;motor enabled勾选<br> 2 设置转动关节不可见：点击转动关节1-&gt;common-&gt;camera visibility laye-&gt;去掉勾选</p><h2 id="复制四份车轮1，转动关节1"><a href="#复制四份车轮1，转动关节1" class="headerlink" title="复制四份车轮1，转动关节1"></a>复制四份车轮1，转动关节1</h2><p> 1 按住shift 选中rfm和rfw,右键edit-&gt;copy,点击小车附近右键edit-&gt;paste</p><h2 id="分别命名lfw-左前轮-lfm-左前关节-lrw-左后轮-lrm-左后关节-rrw-rrm"><a href="#分别命名lfw-左前轮-lfm-左前关节-lrw-左后轮-lrm-左后关节-rrw-rrm" class="headerlink" title="分别命名lfw(左前轮),lfm(左前关节),lrw(左后轮),lrm(左后关节)rrw,rrm"></a>分别命名lfw(左前轮),lfm(左前关节),lrw(左后轮),lrm(左后关节)rrw,rrm</h2><h2 id="调整其余四个车轮位置，并装在车上"><a href="#调整其余四个车轮位置，并装在车上" class="headerlink" title="调整其余四个车轮位置，并装在车上"></a>调整其余四个车轮位置，并装在车上</h2><p>  1左前关节(lfm)：position-&gt;x加负号<br>  2左后关节(lrm): position-&gt;x加负号y加负号<br>  3右后关节(rrm): position-&gt;y加负号</p><h1 id="添加路线"><a href="#添加路线" class="headerlink" title="添加路线"></a>添加路线</h1><h2 id="add-gt-path-gt-circle-type"><a href="#add-gt-path-gt-circle-type" class="headerlink" title="add-&gt;path-&gt;circle type"></a>add-&gt;path-&gt;circle type</h2><h2 id="修改路线的形状"><a href="#修改路线的形状" class="headerlink" title="修改路线的形状"></a>修改路线的形状</h2><p>  1 选中path,点击左栏的曲线<br>  2 使路线平滑：勾选path is flat<br>  3 修改路线形状：点击左侧的path point1,点击菜单栏第七个上下移动的图标点击position 鼠标拉着点向外，依次类推<br>  4 修改路线颜色（黑：因为用传感器）选中path,点击左栏的曲线<br>   line size:5<br>    adjust line color-&gt;第一个<br>  5 路线形状使能：show path shaping dialog-&gt;enable<br>  6 路线类型设置为平面：type-&gt;horizontal</p><h1 id="创建传感器"><a href="#创建传感器" class="headerlink" title="创建传感器"></a>创建传感器</h1><h2 id="add-gt-vision-sensor-gt-orthographic-type"><a href="#add-gt-vision-sensor-gt-orthographic-type" class="headerlink" title="add-&gt;vision sensor-&gt;orthographic type"></a>add-&gt;vision sensor-&gt;orthographic type</h2><p> 1 修改属性：勾选use local lights(使用当前光源)<br> 2 传感器探测像素值：resolution x/y: 1,1<br> 3 传感器探测距离：far clipping plane:0.2(米)<br> 4 传感器位置：点击菜单栏第七个上下移动的图标点击position<br>   相对世界：x-0.02，y-0.16,z-0.1<br> 5传感范围位置移动：点击菜单栏第八个旋转的图标点击rotation<br>   相对自己：x-180<br> 6命名为rightsensor</p><h2 id="复制两个传感器"><a href="#复制两个传感器" class="headerlink" title="复制两个传感器"></a>复制两个传感器</h2><p>  1命名为leftsensor命名为middlesensor<br>  2修改middlesensor位置：相对世界：x-0<br>  3修改leftsensor位置：相对世界：x-加负号</p><h1 id="添加视图"><a href="#添加视图" class="headerlink" title="添加视图"></a>添加视图</h1><p>  add-&gt;float view(可以显示传感器数据)（三个）<br>  1选中leftsensor，在float view里右键-&gt;view-&gt;第一个；其他两个同理<br>  2传感器都拖到小车上</p><h1 id="给小车创建集合"><a href="#给小车创建集合" class="headerlink" title="给小车创建集合"></a>给小车创建集合</h1><p>  1按住shift鼠标框住所有部件后，按住shift不动，按住ctrl点击框选区域，在点一下car<br>  2点击左侧搜索图表：common-&gt;选中object is model base </p><h1 id="把小车移到路线上"><a href="#把小车移到路线上" class="headerlink" title="把小车移到路线上"></a>把小车移到路线上</h1><p> 1点击小车，点击菜单栏第七个上下移动的图标,鼠标拖动小车</p><h1 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h1><p> 1创建脚本：点击左侧栏小本本-&gt;点击insert new script-&gt;选择child script( threaded)(子脚本线程)<br> 2脚本关联到车上：associate object-&gt;car<br> 3代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//主程序</span></span><br><span class="line"><span class="function">function <span class="title">sysCall_threadmain</span><span class="params">()</span></span></span><br><span class="line">    -- Put some initialization code here</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//获取左右前关节的句柄</span></span><br><span class="line">rghtmotor=sim.getObjectHandle(<span class="string">&quot;rightfrontmotor&quot;</span>)</span><br><span class="line">leftmotor=sim.getObjectHandle(<span class="string">&quot;leftfrontmotor&quot;</span>)</span><br><span class="line"><span class="comment">//获取三个传感器的句柄</span></span><br><span class="line">lefts=sim.getObjectHandle(<span class="string">&quot;leftsensor&quot;</span>)</span><br><span class="line">middles=sim.getObjectHandle(<span class="string">&quot;middlesensor&quot;</span>)</span><br><span class="line">rights=sim.getObjectHandle(<span class="string">&quot;rightsensor&quot;</span>)</span><br><span class="line"><span class="comment">//设置速度范围</span></span><br><span class="line">speedrange=&#123;<span class="number">-1</span>,<span class="number">-6</span>&#125;</span><br><span class="line"><span class="comment">//设置最大响应时间</span></span><br><span class="line">backwardtime=<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">--creat custom ui</span><br><span class="line">xml=</span><br><span class="line">[[</span><br><span class="line">    &lt;ui title=<span class="string">&quot;speed&quot;</span> closeable=<span class="string">&quot;true&quot;</span> resizeable=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;hslider minimum=<span class="string">&quot;0&quot;</span> maximum=<span class="string">&quot;100&quot;</span> on-change=<span class="string">&quot;speedrange_callback&quot;</span> id=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">    &lt;/ui&gt;</span><br><span class="line">]]</span><br><span class="line"><span class="comment">//创建ui</span></span><br><span class="line">ui=simUI.create(xml)</span><br><span class="line"></span><br><span class="line">speed=(speedrange[<span class="number">1</span>]+speedrange[<span class="number">2</span>])*<span class="number">0.5</span></span><br><span class="line"><span class="comment">//编写ui中的函数</span></span><br><span class="line">function speedrange_callback(ui,id,newVal)</span><br><span class="line">    speed=speedrange[<span class="number">1</span>]+(speedrange[<span class="number">2</span>]-speedrange[<span class="number">1</span>])*newVal/<span class="number">100</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">    -- Put your main loop here, e.g.:</span><br><span class="line"> <span class="comment">//仿真的内容   </span></span><br><span class="line">    <span class="keyword">while</span> sim.getSimulationState()~=sim.simulation_advancing_abouttostop <span class="keyword">do</span></span><br><span class="line">        <span class="comment">//初始传感器</span></span><br><span class="line">            sensorreadingleft=<span class="literal">false</span></span><br><span class="line">            sensorreadingmiddle=<span class="literal">false</span>            </span><br><span class="line">            sensorreadingright=<span class="literal">false</span></span><br><span class="line">         <span class="comment">//读传感器的返回结果和数据   </span></span><br><span class="line">            resultl,datal=sim.readVisionSensor(lefts)</span><br><span class="line">            resultm,datam=sim.readVisionSensor(middles)</span><br><span class="line">            resultr,datar=sim.readVisionSensor(rights)</span><br><span class="line"></span><br><span class="line">           <span class="comment">//判断传感器是否读到数据，读到就收取数据</span></span><br><span class="line">            <span class="keyword">if</span> resultl&gt;=<span class="number">0</span> then</span><br><span class="line">                sensorreadingleft=(datal[<span class="number">11</span>]&lt;<span class="number">0.2</span>)</span><br><span class="line">            end</span><br><span class="line">            <span class="keyword">if</span> resultm&gt;=<span class="number">0</span> then</span><br><span class="line">                sensorreadingmiddle=(datam[<span class="number">11</span>]&lt;<span class="number">0.2</span>)</span><br><span class="line">            end</span><br><span class="line">            <span class="keyword">if</span> resultr&gt;=<span class="number">0</span> then</span><br><span class="line">                sensorreadingright=(datar[<span class="number">11</span>]&lt;<span class="number">0.2</span>)</span><br><span class="line">            end</span><br><span class="line">          <span class="comment">//定义左右关节速度（初始相等）</span></span><br><span class="line">            leftv=speed</span><br><span class="line">            rightv=speed</span><br><span class="line">            <span class="comment">//如果左传感器读到值，左关节速度赋值（小一点就能转弯了）</span></span><br><span class="line">            <span class="keyword">if</span> sensorreadingleft==<span class="literal">true</span> then</span><br><span class="line">                leftv=<span class="number">0.03</span>*speed</span><br><span class="line">            end</span><br><span class="line">            <span class="comment">//如果右传感器读到值，右关节速度赋值（小一点就能转弯了）</span></span><br><span class="line">            <span class="keyword">if</span> sensorreadingright==<span class="literal">true</span> then</span><br><span class="line">                rightv=<span class="number">0.03</span>*speed</span><br><span class="line">            end</span><br><span class="line">            <span class="comment">//如果左右传感器读到值，直接进行下个周期（保持原方式行进）</span></span><br><span class="line">            <span class="keyword">if</span> sensorreadingright==<span class="literal">true</span> <span class="keyword">and</span> sensorreadingleft==<span class="literal">true</span>  then</span><br><span class="line">                backwardtime=sim.getSimulationTime()+<span class="number">2</span></span><br><span class="line">            end</span><br><span class="line">            </span><br><span class="line"><span class="comment">//如果运行的回传时间仍在响应时间内（未超时）设置左右关节速度</span></span><br><span class="line"><span class="keyword">if</span> backwardtime&lt;sim.getSimulationTime() then</span><br><span class="line">    sim.setJointTargetVelocity(rghtmotor,rightv)</span><br><span class="line">    sim.setJointTargetVelocity(leftmotor,leftv)</span><br><span class="line">end</span><br><span class="line"><span class="comment">//如果运行的回传时间超过响应时间内（超时）小车后退</span></span><br><span class="line"><span class="keyword">if</span> backwardtime&gt;sim.getSimulationTime() then</span><br><span class="line">    sim.setJointTargetVelocity(rghtmotor,-speed)</span><br><span class="line">    sim.setJointTargetVelocity(leftmotor,-speed/<span class="number">10</span>)</span><br><span class="line">end</span><br><span class="line"><span class="comment">//切换脚本</span></span><br><span class="line">        sim.switchThread() -- resume in next simulation step</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"><span class="comment">//清除工作</span></span><br><span class="line">function sysCall_cleanup()</span><br><span class="line">    -- Put some clean-up code here</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><h1 id="源码链接"><a href="#源码链接" class="headerlink" title="源码链接"></a>源码链接</h1><p>链接：<a href="https://pan.baidu.com/s/1LriziMKsp0-iWGk8t47YzA?pwd=33yf">https://pan.baidu.com/s/1LriziMKsp0-iWGk8t47YzA?pwd=33yf</a><br>提取码：33yf</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qt-安卓</title>
      <link href="blog/qt-%E5%AE%89%E5%8D%93/"/>
      <url>blog/qt-%E5%AE%89%E5%8D%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>需要包 链接：<a href="https://pan.baidu.com/s/1hFl-u55pW1sLx759tJowKQ?pwd=hzlt">https://pan.baidu.com/s/1hFl-u55pW1sLx759tJowKQ?pwd=hzlt</a><br>提取码：hzlt<br>视频：<a href="https://www.bilibili.com/video/BV1954y1Q7Ro?share_source=copy_web&amp;vd_source=3a4f02434e353296deced7b70d6b1042">https://www.bilibili.com/video/BV1954y1Q7Ro?share_source=copy_web&amp;vd_source=3a4f02434e353296deced7b70d6b1042</a></p>]]></content>
      
      
      <categories>
          
          <category> qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UDP</title>
      <link href="blog/UDP/"/>
      <url>blog/UDP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>   1目标地址和目标端口都是自己写的，绑定端口也是自己写的<br>   2udp是无连接传输，每个客户机都有一个自己的socket<br>   3.每一个客户机的socket中在开始连接之前都要写本机的信息(本机IP,端口,想要的目标机的ip和端口等)和想要发的内容<br>   4.当每个客户机都完善自己的socket后,每个客户机的socket都自动在网络中寻找对应的socket，并见面后自动更新数据把对方的信息放在自己里面<br>   5.这样一来只要socket里的信息增加了就可以去读取里面的对方的内容</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">1.</span>头文件</span><br><span class="line">   include &lt;QMainWindow&gt;</span><br><span class="line">    include&lt;QLabel&gt;</span><br><span class="line">   include&lt;QUdpSocket&gt;</span><br><span class="line">   <span class="number">1</span>  定义udp的socket</span><br><span class="line">     QUdpSocket *udpSocket;</span><br><span class="line">    <span class="number">2</span> 实现槽函数</span><br><span class="line">    <span class="keyword">private</span> slots:</span><br><span class="line"><span class="comment">//自定义槽函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态改变</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onSocketStateChange</span><span class="params">(QAbstractSocket::SocketState socketState)</span></span>;</span><br><span class="line">    <span class="comment">//读取socket传入的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onSocketReadyRead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击绑定</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actStart_triggered</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//点击解绑</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actStop_triggered</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//点击发送</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_btnSend_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//点击清空文本</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_action_3_triggered</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="comment">//点击广播</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_btnBroadcast_clicked</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="函数实现过程"><a href="#函数实现过程" class="headerlink" title="函数实现过程"></a>函数实现过程</h2><p>  一 完善socket信息<br>   1.绑定端口void on_actStart_triggered();<br>   2.向socket写入目标ip,目标端口和发送内容void on_btnSend_clicked();<br>   主要是socket里的writeDatagram写入(eg: //socket里放入目标ip目标端口和发送的消息<br>    udpSocket-&gt;writeDatagram(str,targetAddr,targetPort);)<br>   二读取收到的数据 void  onSocketReadyRead();<br>     若socket有新数据返回，则自动产生readyRead()信号<br>     若socket有新数据则socket里的hasPendingDatagrams()会返回1<br>     通过socket里的readDatagram()函数可以读取对对方的信息(包括IP，端口)<br>    三 解除端口绑定不再连接void on_actStop_triggered();<br>      socket里有abort()函数可以消灭连接<br>    四若实现广播，第二步在写socket时writeDatagram(发送内容,QHostAddress::Broadcast,目标端口);//指明了方式Broadcast，所以没写目标IP</p><h2 id="函数代码"><a href="#函数代码" class="headerlink" title="函数代码"></a>函数代码</h2><h3 id="获取本机ip"><a href="#获取本机ip" class="headerlink" title="获取本机ip"></a>获取本机ip</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">QString <span class="title">MainWindow::getLocalIp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//获取本机ip</span></span><br><span class="line">    QString hostName=QHostInfo::localHostName();<span class="comment">//本地主机名</span></span><br><span class="line">    QHostInfo   hostInfo=QHostInfo::fromName(hostName);</span><br><span class="line">    QString   localIP=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QHostAddress&gt; addList=hostInfo.addresses();<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!addList.isEmpty())</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;addList.count();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        QHostAddress aHost=addList.at(i);</span><br><span class="line">        <span class="keyword">if</span> (QAbstractSocket::IPv4Protocol==aHost.protocol())</span><br><span class="line">        &#123;</span><br><span class="line">            localIP=aHost.toString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> localIP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    LabSocketState=<span class="keyword">new</span> QLabel(<span class="string">&quot;Socket状态：&quot;</span>);<span class="comment">//状态栏标签</span></span><br><span class="line">    LabSocketState-&gt;setMinimumWidth(<span class="number">200</span>);</span><br><span class="line">    ui-&gt;statusBar-&gt;addWidget(LabSocketState);</span><br><span class="line">    QString localIp=getLocalIp();<span class="comment">//本机IP</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;setWindowTitle(<span class="keyword">this</span>-&gt;windowTitle()+<span class="string">&quot;----本机IP：&quot;</span>+localIp);</span><br><span class="line">    <span class="comment">//这里只是测试，自己可以输入对方的ip</span></span><br><span class="line">    ui-&gt;comboTargetIP-&gt;addItem(localIp);</span><br><span class="line">    udpSocket=<span class="keyword">new</span> QUdpSocket(<span class="keyword">this</span>);</span><br><span class="line">    connect(udpSocket,SIGNAL(stateChanged(QAbstractSocket::SocketState)),<span class="keyword">this</span>,SLOT(onSocketStateChange(QAbstractSocket::SocketState)));</span><br><span class="line">    connect(udpSocket,SIGNAL(readyRead()),<span class="keyword">this</span>,SLOT(onSocketReadyRead()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取socket传入的数据"><a href="#读取socket传入的数据" class="headerlink" title="读取socket传入的数据"></a>读取socket传入的数据</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onSocketReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取缓冲区行文本</span></span><br><span class="line">    <span class="comment">//有数据报时读取</span></span><br><span class="line">        <span class="keyword">while</span>(udpSocket-&gt;hasPendingDatagrams())</span><br><span class="line">     &#123;</span><br><span class="line">            <span class="comment">//用一个数组接收</span></span><br><span class="line">            QByteArray datagram;</span><br><span class="line">           <span class="comment">//设置数组大小(根据数据报大小)</span></span><br><span class="line">            datagram.resize(udpSocket-&gt;pendingDatagramSize());</span><br><span class="line">            <span class="comment">//读取对方ip地址</span></span><br><span class="line">             <span class="comment">//读取对方端口号</span></span><br><span class="line">            QHostAddress peerAddr;</span><br><span class="line">            quint16 peerPort;</span><br><span class="line">            <span class="comment">//读数据报的数据，大小，对方ip和端口</span></span><br><span class="line">            udpSocket-&gt;readDatagram(datagram.data(),datagram.size(),&amp;peerAddr,&amp;peerPort);</span><br><span class="line">            <span class="comment">//数据转化类型</span></span><br><span class="line">            QString str=datagram.data();</span><br><span class="line">            <span class="comment">//对方ip转化类型</span></span><br><span class="line">            <span class="comment">//对方端口转化类型</span></span><br><span class="line">            QString peer=<span class="string">&quot;来自&quot;</span>+peerAddr.toString()+<span class="string">&quot;的&quot;</span>+QString::number(peerPort)+<span class="string">&quot;端口:&quot;</span>;</span><br><span class="line">         <span class="comment">//显示对方ip，端口</span></span><br><span class="line">            ui-&gt;plainTextEdit-&gt;appendPlainText(peer);</span><br><span class="line">            <span class="comment">//显示收到消息内容</span></span><br><span class="line">           ui-&gt;plainTextEdit-&gt;appendPlainText(str);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击绑定"><a href="#点击绑定" class="headerlink" title="点击绑定"></a>点击绑定</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_actStart_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//绑定端口</span></span><br><span class="line">    quint16 port=ui-&gt;spinBindPort-&gt;value();</span><br><span class="line">    <span class="comment">//udpSocket-&gt;bind(port)绑定端口并返回bool类型</span></span><br><span class="line">    <span class="keyword">if</span>(udpSocket-&gt;bind(port))</span><br><span class="line">    &#123;</span><br><span class="line">      ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**已成功绑定&quot;</span>);</span><br><span class="line">      ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**绑定端口:&quot;</span>+QString::number(udpSocket-&gt;localPort()));</span><br><span class="line">      ui-&gt;actStart-&gt;setEnabled(<span class="literal">false</span>);</span><br><span class="line">      ui-&gt;actStop-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**绑定失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击解绑"><a href="#点击解绑" class="headerlink" title="点击解绑"></a>点击解绑</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_actStop_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//解除端口绑定</span></span><br><span class="line">    udpSocket-&gt;<span class="built_in">abort</span>();</span><br><span class="line">    ui-&gt;actStart-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">    ui-&gt;actStop-&gt;setEnabled(<span class="literal">false</span>);</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**已经解除绑定&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击发送"><a href="#点击发送" class="headerlink" title="点击发送"></a>点击发送</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_btnSend_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//点击发送</span></span><br><span class="line">    QString targetIp=ui-&gt;comboTargetIP-&gt;currentText();</span><br><span class="line">    <span class="comment">//通过ip生成一个QHostAddress对象</span></span><br><span class="line">    <span class="function">QHostAddress <span class="title">targetAddr</span><span class="params">(targetIp)</span></span>;</span><br><span class="line">    quint16 targetPort=ui-&gt;spinTargetPort-&gt;value();</span><br><span class="line">    QString msg=ui-&gt;editMsg-&gt;text();</span><br><span class="line">    QByteArray str=msg.toUtf8();</span><br><span class="line">    <span class="comment">//socket里放入目标ip目标端口和发送的消息</span></span><br><span class="line">    udpSocket-&gt;writeDatagram(str,targetAddr,targetPort);</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;[out]&quot;</span>+msg);</span><br><span class="line">    ui-&gt;editMsg-&gt;clear();</span><br><span class="line">    ui-&gt;editMsg-&gt;setFocus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击广播"><a href="#点击广播" class="headerlink" title="点击广播"></a>点击广播</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_btnBroadcast_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//获取自己写的目标端口</span></span><br><span class="line"> quint16 targetPort=ui-&gt;spinTargetPort-&gt;value();</span><br><span class="line"> <span class="comment">//获取自己要发的消息</span></span><br><span class="line"> QString msg=ui-&gt;editMsg-&gt;text();</span><br><span class="line"> <span class="comment">//消息换成QByteArray 类型保证不会乱码</span></span><br><span class="line"> QByteArray str=msg.toUtf8();</span><br><span class="line"> <span class="comment">//向socket里写数据并表明这条数据用来广播</span></span><br><span class="line"> udpSocket-&gt;writeDatagram(str,QHostAddress::Broadcast,targetPort);</span><br><span class="line"> <span class="comment">//显示广播信息（同网段的这个端口都能收到）</span></span><br><span class="line"> ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;本机已发布广播:&quot;</span>+msg);</span><br><span class="line"> ui-&gt;editMsg-&gt;clear();</span><br><span class="line"> ui-&gt;editMsg-&gt;setFocus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击清空文本"><a href="#点击清空文本" class="headerlink" title="点击清空文本"></a>点击清空文本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_action_3_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 源码：链接：<a href="https://pan.baidu.com/s/1Pl-YGquor1JMVlOHI57dog?pwd=waat">https://pan.baidu.com/s/1Pl-YGquor1JMVlOHI57dog?pwd=waat</a><br>提取码：waat</p>]]></content>
      
      
      <categories>
          
          <category> qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt通信tcp</title>
      <link href="blog/qt%E9%80%9A%E4%BF%A1tcp/"/>
      <url>blog/qt%E9%80%9A%E4%BF%A1tcp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一相关函数-QT-network"><a href="#一相关函数-QT-network" class="headerlink" title="一相关函数(QT       += network)"></a>一相关函数(QT       += network)</h1><h2 id="1主机-本机-信息查询"><a href="#1主机-本机-信息查询" class="headerlink" title="1主机(本机)信息查询"></a>1主机(本机)信息查询</h2><h3 id="一-QHostInfo类："><a href="#一-QHostInfo类：" class="headerlink" title="一 QHostInfo类："></a>一 QHostInfo类：</h3><h4 id="1-localHostName-函数：返回本机主机名"><a href="#1-localHostName-函数：返回本机主机名" class="headerlink" title="1 localHostName()函数：返回本机主机名"></a>1 localHostName()函数：返回本机主机名</h4><pre><code>无参数，返回值QString类型的主机名称</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QString hostName=QHostInfo::localHostName();<span class="comment">//本地主机名</span></span><br></pre></td></tr></table></figure><h4 id="2-fromName-QString-amp-name-函数：返回指定的主机名的IP地址-参数：QString类型的主机名-返回值：指定的主机名QHostInfo类型的IP地址"><a href="#2-fromName-QString-amp-name-函数：返回指定的主机名的IP地址-参数：QString类型的主机名-返回值：指定的主机名QHostInfo类型的IP地址" class="headerlink" title="2 fromName(QString &amp;name)函数：返回指定的主机名的IP地址  参数：QString类型的主机名  返回值：指定的主机名QHostInfo类型的IP地址"></a>2 fromName(QString &amp;name)函数：返回指定的主机名的IP地址  参数：QString类型的主机名  返回值：指定的主机名QHostInfo类型的IP地址</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QHostInfo   hostInfo=QHostInfo::fromName(hostName);</span><br></pre></td></tr></table></figure><h4 id="3-addresses-函数：返回与hostName-主机关联的IP地址列表-即QHostInfo类型转化成QList类型方便提取-无参数，返回QList类型的ip列表-就是个数组每一条都是QHostAddress类型"><a href="#3-addresses-函数：返回与hostName-主机关联的IP地址列表-即QHostInfo类型转化成QList类型方便提取-无参数，返回QList类型的ip列表-就是个数组每一条都是QHostAddress类型" class="headerlink" title="3 addresses()函数：返回与hostName()主机关联的IP地址列表[即QHostInfo类型转化成QList类型方便提取] 无参数，返回QList类型的ip列表(就是个数组每一条都是QHostAddress类型)"></a>3 addresses()函数：返回与hostName()主机关联的IP地址列表[即QHostInfo类型转化成QList<QHostAddress>类型方便提取] 无参数，返回QList<QHostAddress>类型的ip列表(就是个数组每一条都是QHostAddress类型)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QList&lt;QHostAddress&gt; addList=hostInfo.addresses();</span><br></pre></td></tr></table></figure><h4 id="4-QList-提取每条QHostAddress类型的数据：at-i-protocol-函数可以显示QHostAddress类型中的地址是ipv4还是ipv6toString-可以把QHostAddress类型转换成String类型"><a href="#4-QList-提取每条QHostAddress类型的数据：at-i-protocol-函数可以显示QHostAddress类型中的地址是ipv4还是ipv6toString-可以把QHostAddress类型转换成String类型" class="headerlink" title="4  QList 提取每条QHostAddress类型的数据：at(i)protocol()函数可以显示QHostAddress类型中的地址是ipv4还是ipv6toString()可以把QHostAddress类型转换成String类型"></a>4  QList<QHostAddress> 提取每条QHostAddress类型的数据：at(i)protocol()函数可以显示QHostAddress类型中的地址是ipv4还是ipv6toString()可以把QHostAddress类型转换成String类型</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//遍历查询ip</span></span><br><span class="line"> <span class="comment">//非空时定义一个QHostAddress类型的变量来接收QList&lt;QHostAddress&gt;类型的ip列表的第i条数据</span></span><br><span class="line"><span class="keyword">if</span> (!addList.isEmpty())</span><br><span class="line"><span class="comment">//获取列表中有几条并借此循环</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;addList.count();i++)</span><br><span class="line"> &#123;  <span class="comment">//addList.at(i)取出QList容器中第i条数据</span></span><br><span class="line">     QHostAddress aHost=addList.at(i);</span><br><span class="line">     <span class="comment">//protocol()函数可以显示QHostAddress类型中的地址是ipv4还是ipv6</span></span><br><span class="line">     <span class="keyword">if</span> (QAbstractSocket::IPv4Protocol==aHost.protocol())</span><br><span class="line">     &#123;</span><br><span class="line">      <span class="comment">//  QHostAddress类型可以toString()转换成String类型</span></span><br><span class="line">                 localIP=aHost.toString();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="二-QNetworkInterface类："><a href="#二-QNetworkInterface类：" class="headerlink" title="二 QNetworkInterface类："></a>二 QNetworkInterface类：</h3><h4 id="1-allInterfaces-函数：返回主机上所有接口的网络列表"><a href="#1-allInterfaces-函数：返回主机上所有接口的网络列表" class="headerlink" title="1. allInterfaces()函数：返回主机上所有接口的网络列表"></a>1. allInterfaces()函数：返回主机上所有接口的网络列表</h4><pre><code>   无参数，返回值QList&lt;QNetworkInterface&gt;(QNetworkInterface类型的数组)   返回值包含QString类型的：              接口名称 :通过QNetworkInterfac的对象.humanReadableName()              硬件地址 :通过QNetworkInterfac的对象.hardwareAddress()            QList&lt;QNetworkAddressEntry&gt;类型的：              ip地址列表(包含ip,mac地址和 ): 通过QNetworkInterfac的对象.addressEntries()2. .ip().toString()函数: 把QNetworkAddressEntry类型里的IP转化为String3.  .netmask().toString()函数：把QNetworkAddressEntry类型里的物理mac地址转化为String4.  .broadcast.toString()函数：把QNetworkAddressEntry类型里的广播地址转化为String</code></pre><p><img src="https://s1.ax1x.com/2022/07/22/jOUkmd.png" alt=""><br><img src="https://s1.ax1x.com/2022/07/22/jOUK1S.png" alt=""></p><h2 id="2-实现过程（服务端）"><a href="#2-实现过程（服务端）" class="headerlink" title="2.实现过程（服务端）"></a>2.实现过程（服务端）</h2><p>   ui  comboIP:监听地址<br>       actStart:开始监听按钮<br>       spinPort:监听端口按钮<br>       btnSend:发送按钮<br>       editMsg：消息发送文本框</p><h3 id="1-在mainwindow-h中"><a href="#1-在mainwindow-h中" class="headerlink" title="1. 在mainwindow.h中"></a>1. 在mainwindow.h中</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;QTcpSocket&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QLabel  *LabListen;<span class="comment">//状态栏标签(显示是否监听成功)</span></span><br><span class="line">    QLabel  *LabSocketState;<span class="comment">//状态栏标签（显示套接字状态）</span></span><br><span class="line"></span><br><span class="line">    QTcpServer *tcpServer; <span class="comment">//TCP服务器(实例化一个服务器对象)</span></span><br><span class="line"></span><br><span class="line">    QTcpSocket *tcpSocket;<span class="comment">//TCP通讯的Socket(实例化一个套接字)</span></span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">getLocalIP</span><span class="params">()</span></span>;<span class="comment">//获取本机IP地址(写一个获取本地ip的函数)</span></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line"><span class="comment">//自定义槽函数</span></span><br><span class="line">    <span class="comment">//一旦有新的连接并成功连接，QTcpServer类实例化的对象就会自动产生newConnection()信号</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onNewConnection</span><span class="params">()</span></span>;<span class="comment">//QTcpServer的newConnection()信号</span></span><br><span class="line">    <span class="comment">// 套接字状态改变执行的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onSocketStateChange</span><span class="params">(QAbstractSocket::SocketState socketState)</span></span>;</span><br><span class="line">    <span class="comment">// 客户端启动连接时服务器该执行的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onClientConnected</span><span class="params">()</span></span>; <span class="comment">//Client Socket connected</span></span><br><span class="line">    <span class="comment">//客户端关掉连接时服务器该执行的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onClientDisconnected</span><span class="params">()</span></span>;<span class="comment">//Client Socket disconnected</span></span><br><span class="line">    <span class="comment">//读取socket传入的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onSocketReadyRead</span><span class="params">()</span></span>;<span class="comment">//读取socket传入的数据</span></span><br><span class="line"><span class="comment">//UI生成的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actStart_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actStop_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actClear_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_btnSend_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actHostInfo_triggered</span><span class="params">()</span></span>;    </span><br></pre></td></tr></table></figure><h3 id="2-在mainwindow-cpp中-include"><a href="#2-在mainwindow-cpp中-include" class="headerlink" title="2. 在mainwindow.cpp中(#include    )"></a>2. 在mainwindow.cpp中(#include    <QtNetwork>)</h3><h4 id="实现获取本地ip-编写-getLocalIP"><a href="#实现获取本地ip-编写-getLocalIP" class="headerlink" title="实现获取本地ip: 编写  getLocalIP()"></a>实现获取本地ip: 编写  getLocalIP()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QString <span class="title">MainWindow::getLocalIP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//获取本机IPv4地址</span></span><br><span class="line">    QString hostName=QHostInfo::localHostName();<span class="comment">//本地主机名</span></span><br><span class="line">    QHostInfo   hostInfo=QHostInfo::fromName(hostName);</span><br><span class="line">    QString   localIP=<span class="string">&quot;&quot;</span>;</span><br><span class="line">     <span class="comment">//一个容器</span></span><br><span class="line">    QList&lt;QHostAddress&gt; addList=hostInfo.addresses();<span class="comment">//</span></span><br><span class="line">     <span class="comment">//判段是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!addList.isEmpty())</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;addList.count();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        QHostAddress aHost=addList.at(i);</span><br><span class="line">        <span class="comment">//筛选ipv4类型的</span></span><br><span class="line">        <span class="keyword">if</span> (QAbstractSocket::IPv4Protocol==aHost.protocol())</span><br><span class="line">        &#123;</span><br><span class="line">            localIP=aHost.toString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回ip地址</span></span><br><span class="line">    <span class="keyword">return</span> localIP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数："><a href="#构造函数：" class="headerlink" title="构造函数："></a>构造函数：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//建立一个文本框名字为 LabListen，初始打印&quot;监听状态&quot;</span></span><br><span class="line">    LabListen=<span class="keyword">new</span> QLabel(<span class="string">&quot;监听状态:&quot;</span>);</span><br><span class="line">    <span class="comment">//设置文本框(LabListen)的最小宽度</span></span><br><span class="line">    LabListen-&gt;setMinimumWidth(<span class="number">150</span>);</span><br><span class="line">    <span class="comment">//把文本框(LabListen)添加到ui中</span></span><br><span class="line">    ui-&gt;statusBar-&gt;addWidget(LabListen);</span><br><span class="line">    <span class="comment">//建立一个文本框名字为 LabSocketState，初始打印&quot;Socket状态:&quot;</span></span><br><span class="line">    LabSocketState=<span class="keyword">new</span> QLabel(<span class="string">&quot;Socket状态：&quot;</span>);</span><br><span class="line">     <span class="comment">//设置文本框(LabSocketState)的最小宽度</span></span><br><span class="line">    LabSocketState-&gt;setMinimumWidth(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">//把文本框(LabSocketState)添加到ui中</span></span><br><span class="line">    ui-&gt;statusBar-&gt;addWidget(LabSocketState);</span><br><span class="line">     <span class="comment">//得到本机ip</span></span><br><span class="line">    QString localIP=getLocalIP();<span class="comment">//本机IP</span></span><br><span class="line">    <span class="comment">//设置窗口标题为本机ip</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;setWindowTitle(<span class="keyword">this</span>-&gt;windowTitle()+<span class="string">&quot;----本机IP：&quot;</span>+localIP);</span><br><span class="line">    <span class="comment">//显示本机ip到comboIP控件</span></span><br><span class="line">    ui-&gt;comboIP-&gt;addItem(localIP);</span><br><span class="line">     <span class="comment">//实例化一个服务器</span></span><br><span class="line">    tcpServer=<span class="keyword">new</span> QTcpServer(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//(服务器开始监听后收到信号会自动连接，成功后会自动产生newConnection()信号)一旦连接服务器对象连接成功执行槽函数onNewConnectio()</span></span><br><span class="line">    connect(tcpServer,SIGNAL(newConnection()),<span class="keyword">this</span>,SLOT(onNewConnection()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写服务器监听函数-on-actStart-triggered"><a href="#编写服务器监听函数-on-actStart-triggered" class="headerlink" title="编写服务器监听函数 on_actStart_triggered();"></a>编写服务器监听函数 on_actStart_triggered();</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_actStart_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//开始监听</span></span><br><span class="line">   <span class="comment">//获取本地ip</span></span><br><span class="line">    QString     IP=ui-&gt;comboIP-&gt;currentText();<span class="comment">//IP地址</span></span><br><span class="line">    <span class="comment">//获取自己填写的端口</span></span><br><span class="line">    quint16     port=ui-&gt;spinPort-&gt;value();<span class="comment">//端口</span></span><br><span class="line">    <span class="comment">//通过ip生成一个QHostAddress类型的ip</span></span><br><span class="line">    <span class="function">QHostAddress    <span class="title">addr</span><span class="params">(IP)</span></span>;</span><br><span class="line">    <span class="comment">//服务器监听此地址和此端口</span></span><br><span class="line">    tcpServer-&gt;listen(addr,port);</span><br><span class="line"><span class="comment">//    tcpServer-&gt;listen(QHostAddress::LocalHost,port);// Equivalent to QHostAddress(&quot;127.0.0.1&quot;).</span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**开始监听...&quot;</span>);</span><br><span class="line">  <span class="comment">// 显示服务器地址</span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**服务器地址：&quot;</span></span><br><span class="line">                       +tcpServer-&gt;serverAddress().toString());</span><br><span class="line">   <span class="comment">//显示服务器端口                    </span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**服务器端口：&quot;</span></span><br><span class="line">                       +QString::number(tcpServer-&gt;serverPort()));</span><br><span class="line">   <span class="comment">//开始监听按钮不能点击</span></span><br><span class="line">    ui-&gt;actStart-&gt;setEnabled(<span class="literal">false</span>);</span><br><span class="line">   <span class="comment">// 停止按钮可以点击</span></span><br><span class="line">    ui-&gt;actStop-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">//文本显示&quot;监听状态：正在监听&quot;</span></span><br><span class="line">    LabListen-&gt;setText(<span class="string">&quot;监听状态：正在监听&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写客户端启动连接时服务器该执行的函数onClientConnected"><a href="#编写客户端启动连接时服务器该执行的函数onClientConnected" class="headerlink" title="编写客户端启动连接时服务器该执行的函数onClientConnected()"></a>编写客户端启动连接时服务器该执行的函数onClientConnected()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只打印信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onClientConnected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**client socket connected&quot;</span>);</span><br><span class="line">    <span class="comment">//通过传入的socket取出客户端地址并显示</span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**peer address:&quot;</span>+ tcpSocket-&gt;peerAddress().toString());</span><br><span class="line">      <span class="comment">//  通过传入的socket取出客户端端口并显示                           </span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**peer port:&quot;</span>+ QString::number(tcpSocket-&gt;peerPort()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写客户端断开连接时服务器该执行的函数onClientDisconnected"><a href="#编写客户端断开连接时服务器该执行的函数onClientDisconnected" class="headerlink" title="编写客户端断开连接时服务器该执行的函数onClientDisconnected()"></a>编写客户端断开连接时服务器该执行的函数onClientDisconnected()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onClientDisconnected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**client socket disconnected&quot;</span>);</span><br><span class="line">    <span class="comment">//删除Socket</span></span><br><span class="line">    tcpSocket-&gt;deleteLater();</span><br><span class="line">    <span class="comment">//    deleteLater();//QObject::deleteLater();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写客户端与服务器成功建立新连接时服务器该执行的函数onNewConnection"><a href="#编写客户端与服务器成功建立新连接时服务器该执行的函数onNewConnection" class="headerlink" title="编写客户端与服务器成功建立新连接时服务器该执行的函数onNewConnection()"></a>编写客户端与服务器成功建立新连接时服务器该执行的函数onNewConnection()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onNewConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建socket</span></span><br><span class="line">    tcpSocket = tcpServer-&gt;nextPendingConnection(); <span class="comment">//创建socket</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    connect(tcpSocket, SIGNAL(connected()),</span><br><span class="line">            <span class="keyword">this</span>, SLOT(onClientConnected()));</span><br><span class="line">    onClientConnected();<span class="comment">//</span></span><br><span class="line">    <span class="comment">//连接断开时Socket自动产生disconnected()信号</span></span><br><span class="line">    <span class="comment">//客户端断开连接时服务器执行槽函数onClientDisconnected()</span></span><br><span class="line">    connect(tcpSocket, SIGNAL(disconnected()),</span><br><span class="line">            <span class="keyword">this</span>, SLOT(onClientDisconnected()));</span><br><span class="line">     <span class="comment">//socket状态改变时Socket自动产生stateChanged信号</span></span><br><span class="line">     <span class="comment">//参数QAbstractSocket::SocketState socketState自动改变</span></span><br><span class="line">     <span class="comment">//socket状态改变时服务器该执行槽函数onSocketStateChange(QAbstractSocket::SocketState)</span></span><br><span class="line">    connect(tcpSocket,SIGNAL(stateChanged(QAbstractSocket::SocketState)),</span><br><span class="line">            <span class="keyword">this</span>,SLOT(onSocketStateChange(QAbstractSocket::SocketState)));</span><br><span class="line">    <span class="comment">//建立了新连接，执行槽函数 onSocketStateChange更改里面的值</span></span><br><span class="line">    onSocketStateChange(tcpSocket-&gt;state());</span><br><span class="line">     <span class="comment">//完成连接后一旦Socket里背写入信息自动产生readyRead()信号 执行槽函数onSocketReadyRead()读Socket里的信息 </span></span><br><span class="line">    connect(tcpSocket,SIGNAL(readyRead()),</span><br><span class="line">            <span class="keyword">this</span>,SLOT(onSocketReadyRead()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写客户端与服务器socket状态改变该执行的函数onSocketStateChange-QAbstractSocket-SocketState-socketState"><a href="#编写客户端与服务器socket状态改变该执行的函数onSocketStateChange-QAbstractSocket-SocketState-socketState" class="headerlink" title="编写客户端与服务器socket状态改变该执行的函数onSocketStateChange(QAbstractSocket::SocketState socketState)"></a>编写客户端与服务器socket状态改变该执行的函数onSocketStateChange(QAbstractSocket::SocketState socketState)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onSocketStateChange</span><span class="params">(QAbstractSocket::SocketState socketState)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//一旦socket状态变化时参数QAbstractSocket::SocketState socketState自动改变</span></span><br><span class="line">    <span class="comment">//socket状态变化时</span></span><br><span class="line">    <span class="keyword">switch</span>(socketState)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> QAbstractSocket::UnconnectedState:</span><br><span class="line">    <span class="comment">//无连接</span></span><br><span class="line">        LabSocketState-&gt;setText(<span class="string">&quot;scoket状态：UnconnectedState&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="comment">//正在查询   </span></span><br><span class="line">    <span class="keyword">case</span> QAbstractSocket::HostLookupState:</span><br><span class="line">        LabSocketState-&gt;setText(<span class="string">&quot;scoket状态：HostLookupState&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//正在连接  </span></span><br><span class="line">    <span class="keyword">case</span> QAbstractSocket::ConnectingState:</span><br><span class="line">        LabSocketState-&gt;setText(<span class="string">&quot;scoket状态：ConnectingState&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">       <span class="comment">//连接成功</span></span><br><span class="line">    <span class="keyword">case</span> QAbstractSocket::ConnectedState:</span><br><span class="line">        LabSocketState-&gt;setText(<span class="string">&quot;scoket状态：ConnectedState&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">       <span class="comment">//边界状态</span></span><br><span class="line">    <span class="keyword">case</span> QAbstractSocket::BoundState:</span><br><span class="line">        LabSocketState-&gt;setText(<span class="string">&quot;scoket状态：BoundState&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">       <span class="comment">//关闭状态</span></span><br><span class="line">    <span class="keyword">case</span> QAbstractSocket::ClosingState:</span><br><span class="line">        LabSocketState-&gt;setText(<span class="string">&quot;scoket状态：ClosingState&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//监听状态</span></span><br><span class="line">    <span class="keyword">case</span> QAbstractSocket::ListeningState:</span><br><span class="line">        LabSocketState-&gt;setText(<span class="string">&quot;scoket状态：ListeningState&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写自动读取Socket存放的消息的函数onSocketReadyRead"><a href="#编写自动读取Socket存放的消息的函数onSocketReadyRead" class="headerlink" title="编写自动读取Socket存放的消息的函数onSocketReadyRead()"></a>编写自动读取Socket存放的消息的函数onSocketReadyRead()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onSocketReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//读取缓冲区行文本</span></span><br><span class="line"><span class="comment">//如果能读一行，就读一行</span></span><br><span class="line">    <span class="keyword">while</span>(tcpSocket-&gt;canReadLine())</span><br><span class="line">        ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;[in] &quot;</span>+tcpSocket-&gt;readLine());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写服务器停止监听函数-on-actStop-triggered"><a href="#编写服务器停止监听函数-on-actStop-triggered" class="headerlink" title="编写服务器停止监听函数 on_actStop_triggered();"></a>编写服务器停止监听函数 on_actStop_triggered();</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_actStop_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//tcpServer正在监听</span></span><br><span class="line">    <span class="keyword">if</span> (tcpServer-&gt;isListening()) </span><br><span class="line">    &#123;  <span class="comment">//停止监听</span></span><br><span class="line">        tcpServer-&gt;close();</span><br><span class="line">        <span class="comment">//打开开始监听按钮</span></span><br><span class="line">        ui-&gt;actStart-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//关闭停止监听按钮</span></span><br><span class="line">        ui-&gt;actStop-&gt;setEnabled(<span class="literal">false</span>);</span><br><span class="line">        LabListen-&gt;setText(<span class="string">&quot;监听状态：已停止监听&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写发送函数-on-btnSend-clicked-收发协议"><a href="#编写发送函数-on-btnSend-clicked-收发协议" class="headerlink" title="编写发送函数 on_btnSend_clicked()//收发协议"></a>编写发送函数 on_btnSend_clicked()//收发协议</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_btnSend_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//发送一行字符串，以换行符结束</span></span><br><span class="line">    <span class="comment">//获取输入文本框的内容进行缓冲（msg就是缓冲）</span></span><br><span class="line">    QString  msg=ui-&gt;editMsg-&gt;text();</span><br><span class="line">    <span class="comment">//显示文本</span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;[out] &quot;</span>+msg);</span><br><span class="line">    <span class="comment">//清空输入</span></span><br><span class="line">    ui-&gt;editMsg-&gt;clear();</span><br><span class="line">    <span class="comment">//定位光标</span></span><br><span class="line">    ui-&gt;editMsg-&gt;setFocus();</span><br><span class="line">     <span class="comment">//把msg(缓冲)里的内容转换成Utf8</span></span><br><span class="line">    QByteArray  str=msg.toUtf8();</span><br><span class="line">    <span class="comment">//添加换行符以便识别输入结束</span></span><br><span class="line">    str.append(<span class="string">&#x27;\n&#x27;</span>);<span class="comment">//添加一个换行符（必须）</span></span><br><span class="line">    <span class="comment">//把消息写入Socket</span></span><br><span class="line">    tcpSocket-&gt;write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-实现过程（客户端）"><a href="#3-实现过程（客户端）" class="headerlink" title="3.实现过程（客户端）"></a>3.实现过程（客户端）</h2><p>  ui  comboServer:服务器地址文本框(里面是自己填的不是传输得到的)<br>       actConnect:连接服务器按钮<br>       spinPort:需要连接的服务器端口文本框((里面是自己填的不是传输得到的))<br>       actDisconnect:断开服务器按钮<br>       btnSend:发送按钮<br>       editMsg：消息发送文本框</p><h3 id="1-在mainwindow-h中-1"><a href="#1-在mainwindow-h中-1" class="headerlink" title="1. 在mainwindow.h中"></a>1. 在mainwindow.h中</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;QTcpSocket&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QTcpSocket  *tcpClient;  <span class="comment">//使用socket实例化一个里客户端对象</span></span><br><span class="line">    QLabel  *LabSocketState;  <span class="comment">//状态栏标签（显示套接字状态）</span></span><br><span class="line">    <span class="function">QString <span class="title">getLocalIP</span><span class="params">()</span></span>;<span class="comment">//获取本机IP地址</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">closeEvent</span><span class="params">(QCloseEvent *event)</span></span>;</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line"><span class="comment">//自定义槽函数</span></span><br><span class="line">    <span class="comment">//客户端连接成功执行的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onConnected</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//客户端断开执行的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onDisconnected</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 套接字状态改变执行的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onSocketStateChange</span><span class="params">(QAbstractSocket::SocketState socketState)</span></span>;</span><br><span class="line">    <span class="comment">//读取socket传入的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">onSocketReadyRead</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//ui生成的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actConnect_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actDisconnect_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_actClear_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_btnSend_clicked</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="2-在mainwindow-cpp中"><a href="#2-在mainwindow-cpp中" class="headerlink" title="2. 在mainwindow.cpp中"></a>2. 在mainwindow.cpp中</h3><pre><code>#include &lt;QHostAddress&gt;#include &lt;QHostInfo&gt;)</code></pre><h4 id="实现获取本地ip-编写-getLocalIP-1"><a href="#实现获取本地ip-编写-getLocalIP-1" class="headerlink" title="实现获取本地ip: 编写  getLocalIP()"></a>实现获取本地ip: 编写  getLocalIP()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">与上面的一样</span><br></pre></td></tr></table></figure><h4 id="构造函数：-1"><a href="#构造函数：-1" class="headerlink" title="构造函数："></a>构造函数：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">      <span class="comment">//使用socket实例化一个里客户端对象(客户端本身就是个socket)</span></span><br><span class="line">      <span class="comment">//创建socket变量</span></span><br><span class="line">    tcpClient=<span class="keyword">new</span> QTcpSocket(<span class="keyword">this</span>); </span><br><span class="line">    <span class="comment">//建立一个文本框名字为 LabSocketState，初始打印&quot;Socket状态:&quot;</span></span><br><span class="line">    LabSocketState=<span class="keyword">new</span> QLabel(<span class="string">&quot;Socket状态：&quot;</span>);<span class="comment">//状态栏标签</span></span><br><span class="line">    <span class="comment">//设置文本框(LabSocketState)的最小宽度</span></span><br><span class="line">    LabSocketState-&gt;setMinimumWidth(<span class="number">250</span>);</span><br><span class="line">     <span class="comment">//把文本框(LabSocketState)添加到ui中</span></span><br><span class="line">    ui-&gt;statusBar-&gt;addWidget(LabSocketState);</span><br><span class="line">      <span class="comment">//得到本机ip</span></span><br><span class="line">    QString localIP=getLocalIP();<span class="comment">//本机IP</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;setWindowTitle(<span class="keyword">this</span>-&gt;windowTitle()+<span class="string">&quot;----本机IP：&quot;</span>+localIP);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接成功自动产生connected()信号，执行onConnected()槽函数</span></span><br><span class="line">    connect(tcpClient,SIGNAL(connected()),<span class="keyword">this</span>,SLOT(onConnected()));</span><br><span class="line">    <span class="comment">//连接失败自动产生disconnected()信号，执行onDisconnected()槽函数</span></span><br><span class="line">    connect(tcpClient,SIGNAL(disconnected()),<span class="keyword">this</span>,SLOT(onDisconnected()));</span><br><span class="line">     <span class="comment">//连接状态改变自动产生stateChanged(QAbstractSocket::SocketState)信号，执行onSocketStateChange(QAbstractSocket::SocketState))槽函数  </span></span><br><span class="line">    connect(tcpClient,SIGNAL(stateChanged(QAbstractSocket::SocketState)),</span><br><span class="line">            <span class="keyword">this</span>,SLOT(onSocketStateChange(QAbstractSocket::SocketState)));</span><br><span class="line">     <span class="comment">// socket里有消息可以读时自动产生readyRead()信号，执行onSocketReadyRead()槽函数      </span></span><br><span class="line">    connect(tcpClient,SIGNAL(readyRead()),</span><br><span class="line">            <span class="keyword">this</span>,SLOT(onSocketReadyRead()));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="编写客户端按下启动连接时该执行的函数on-actConnect-triggered"><a href="#编写客户端按下启动连接时该执行的函数on-actConnect-triggered" class="headerlink" title="编写客户端按下启动连接时该执行的函数on_actConnect_triggered()"></a>编写客户端按下启动连接时该执行的函数on_actConnect_triggered()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_actConnect_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//连接到服务器</span></span><br><span class="line">   <span class="comment">//获取comboServer文本框里填写的服务器地址</span></span><br><span class="line">    QString     addr=ui-&gt;comboServer-&gt;currentText();</span><br><span class="line">    <span class="comment">//获取spinPort文本框里填写的服务器端口</span></span><br><span class="line">    quint16     port=ui-&gt;spinPort-&gt;value();</span><br><span class="line">    <span class="comment">//客户端根据地址和端口连接到主机(qt自带的)</span></span><br><span class="line">    <span class="comment">//套接字实例化的客户端使用qt的connectToHost函数可以自动连接到某个服务器</span></span><br><span class="line">    tcpClient-&gt;connectToHost(addr,port);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写客户端无法连接时该执行的函数onDisconnected"><a href="#编写客户端无法连接时该执行的函数onDisconnected" class="headerlink" title="编写客户端无法连接时该执行的函数onDisconnected()"></a>编写客户端无法连接时该执行的函数onDisconnected()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onDisconnected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//disConnected()信号槽函数</span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**已断开与服务器的连接&quot;</span>);</span><br><span class="line">    ui-&gt;actConnect-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">    ui-&gt;actDisconnect-&gt;setEnabled(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写客户端成功连接时该执行的函数onConnected"><a href="#编写客户端成功连接时该执行的函数onConnected" class="headerlink" title="编写客户端成功连接时该执行的函数onConnected()"></a>编写客户端成功连接时该执行的函数onConnected()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onConnected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//connected()信号槽函数</span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**已连接到服务器&quot;</span>);</span><br><span class="line">    <span class="comment">//打印服务器的地址(peer代表同类,连接成功后服务器和客户端就是一对同类)</span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**peer address:&quot;</span>+</span><br><span class="line">                                   tcpClient-&gt;peerAddress().toString());</span><br><span class="line">    <span class="comment">// 打印服务器的端口(peer代表同类)                              </span></span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;**peer port:&quot;</span>+</span><br><span class="line">                                   QString::number(tcpClient-&gt;peerPort()));</span><br><span class="line">     <span class="comment">// 使能按钮                             </span></span><br><span class="line">    ui-&gt;actConnect-&gt;setEnabled(<span class="literal">false</span>);</span><br><span class="line">    ui-&gt;actDisconnect-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写客户端按下断开连接时该执行的函数on-actDisconnect-triggered"><a href="#编写客户端按下断开连接时该执行的函数on-actDisconnect-triggered" class="headerlink" title="编写客户端按下断开连接时该执行的函数on_actDisconnect_triggered()"></a>编写客户端按下断开连接时该执行的函数on_actDisconnect_triggered()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_actDisconnect_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//断开与服务器的连接 </span></span><br><span class="line">     <span class="comment">//判断(socket实例化的)客户端状态:(自动的)</span></span><br><span class="line">    <span class="keyword">if</span> (tcpClient-&gt;state()==QAbstractSocket::ConnectedState)</span><br><span class="line">       <span class="comment">// 客户段断开与主机的联系(qt自带disconnectFromHost())</span></span><br><span class="line">        tcpClient-&gt;disconnectFromHost();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写客户端自动读取socket里的消息的函数onSocketReadyRead"><a href="#编写客户端自动读取socket里的消息的函数onSocketReadyRead" class="headerlink" title="编写客户端自动读取socket里的消息的函数onSocketReadyRead()"></a>编写客户端自动读取socket里的消息的函数onSocketReadyRead()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::onSocketReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//readyRead()信号槽函数</span></span><br><span class="line">    <span class="comment">//如果socket里有消息可以读</span></span><br><span class="line">    <span class="keyword">while</span>(tcpClient-&gt;canReadLine())</span><br><span class="line">        ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;[in] &quot;</span>+tcpClient-&gt;readLine());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写发送函数-on-btnSend-clicked-收发协议-1"><a href="#编写发送函数-on-btnSend-clicked-收发协议-1" class="headerlink" title="编写发送函数 on_btnSend_clicked()//收发协议"></a>编写发送函数 on_btnSend_clicked()//收发协议</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_btnSend_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//发送数据</span></span><br><span class="line">    QString  msg=ui-&gt;editMsg-&gt;text();</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;appendPlainText(<span class="string">&quot;[out] &quot;</span>+msg);</span><br><span class="line">    ui-&gt;editMsg-&gt;clear();</span><br><span class="line">    ui-&gt;editMsg-&gt;setFocus();</span><br><span class="line"></span><br><span class="line">    QByteArray  str=msg.toUtf8();</span><br><span class="line">    str.append(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    tcpClient-&gt;write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写清空文本函数on-actClear-triggered"><a href="#编写清空文本函数on-actClear-triggered" class="headerlink" title="编写清空文本函数on_actClear_triggered()"></a>编写清空文本函数on_actClear_triggered()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_actClear_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="服务端（QTcpServer-tcpServer-TCP服务器-实例化一个服务器对象-）"><a href="#服务端（QTcpServer-tcpServer-TCP服务器-实例化一个服务器对象-）" class="headerlink" title="服务端（QTcpServer *tcpServer; //TCP服务器(实例化一个服务器对象)）"></a>服务端（QTcpServer *tcpServer; //TCP服务器(实例化一个服务器对象)）</h2><h3 id="1-先获取本机ip"><a href="#1-先获取本机ip" class="headerlink" title="1.先获取本机ip"></a>1.先获取本机ip</h3><h3 id="2-服务器监听本机ip和某个端口-自己写的-：tcpServer-gt-listen-addr-port"><a href="#2-服务器监听本机ip和某个端口-自己写的-：tcpServer-gt-listen-addr-port" class="headerlink" title="2.服务器监听本机ip和某个端口(自己写的)：tcpServer-&gt;listen(addr,port);"></a>2.服务器监听本机ip和某个端口(自己写的)：tcpServer-&gt;listen(addr,port);</h3><h3 id="3-服务器开始监听后收到信号会自动连接，成功后会自动产生newConnection-信号-一旦连接服务器对象连接成功执行槽函数onNewConnectio"><a href="#3-服务器开始监听后收到信号会自动连接，成功后会自动产生newConnection-信号-一旦连接服务器对象连接成功执行槽函数onNewConnectio" class="headerlink" title="3.服务器开始监听后收到信号会自动连接，成功后会自动产生newConnection()信号)一旦连接服务器对象连接成功执行槽函数onNewConnectio()"></a>3.服务器开始监听后收到信号会自动连接，成功后会自动产生newConnection()信号)一旦连接服务器对象连接成功执行槽函数onNewConnectio()</h3><p> 1.建立服务器的socket:tcpSocket = tcpServer-&gt;nextPendingConnection();<br> 2.自动连接成功后服务器的socket自动产生connected()信号执行槽函数onNewConnectio()<br> 3.连接断开时服务器Socket自动产生disconnected()信号执行槽函数onClientDisconnected()<br> 4.socket状态改变时Socket自动产生stateChanged信号执行槽函数onSocketStateChange<br> 5.完成连接后一旦Socket里写入信息自动产生readyRead()信号 执行槽函数onSocketReadyRead()读Socket里的信息<br> 6.发送消息就是往socket里写数据： tcpSocket-&gt;write(str);</p><h3 id="4-停止监听-：tcpServer-gt-close"><a href="#4-停止监听-：tcpServer-gt-close" class="headerlink" title="4.停止监听 ：tcpServer-&gt;close();"></a>4.停止监听 ：tcpServer-&gt;close();</h3><h2 id="客户端（QTcpSocket-tcpClient-使用socket实例化一个里客户端对象）"><a href="#客户端（QTcpSocket-tcpClient-使用socket实例化一个里客户端对象）" class="headerlink" title="客户端（QTcpSocket  *tcpClient;  //使用socket实例化一个里客户端对象）"></a>客户端（QTcpSocket  *tcpClient;  //使用socket实例化一个里客户端对象）</h2><p> 1.使用socket实例化一个里客户端对象(客户端本身就是个socket)tcpClient=new QTcpSocket(this);<br> 2.获取本机ip编写<br> 3.客户端根据地址和端口(自己写的要连接的服务器ip和端口)连接到主机(qt自带的):套接字实例化的客户端使用qt的connectToHost函数可以自动连接到某个服务器<br> 4.自动连接成功后客户端自动产生connected()信号执行槽函数onConnected()<br> 5.完成连接后一旦Socket里写入信息自动产生readyRead()信号 执行槽函数onSocketReadyRead()读Socket里的信息<br> 6.连接失败自动产生disconnected()信号，执行onDisconnected()槽函数<br> 7.连接状态改变自动产生stateChanged(QAbstractSocket::SocketState)信号，执行onSocketStateChange(QAbstractSocket::SocketState))槽函数<br> 8.发送消息就是往socket里写数据：tcpClient-&gt;write(str);<br> 9.停止连接： 客户段断开与主机的联系(qt自带disconnectFromHost())：tcpClient-&gt;disconnectFromHost();</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><pre><code>    服务端的ip是获取本机ip得到的，端口自己写的；    客户端要连接哪个服务器的哪个端口是自己写的 :    建立连接后由于是同类了，可以通过套接字里的peer查看对方的ip和端口；    服务器查看客户端的：    IP： tcpSocket-&gt;peerAddress().toString()     端口：QString::number(tcpSocket-&gt;peerPort())    客户端查看服务器的：    ip:    tcpClient-&gt;peerAddress().toString()    端口：QString::number(tcpClient-&gt;peerPort())</code></pre><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><p>   链接：<a href="https://pan.baidu.com/s/1xqtD4-d9SbWwVlFMMrLxEg?pwd=sjii">https://pan.baidu.com/s/1xqtD4-d9SbWwVlFMMrLxEg?pwd=sjii</a><br>提取码：sjii</p>]]></content>
      
      
      <categories>
          
          <category> qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人脸识别</title>
      <link href="blog/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>blog/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一过程"><a href="#一过程" class="headerlink" title="一过程"></a>一过程</h1><h2 id="1生成csv文件（在编译下目录里的1-、2、。。。里面每个用户一个）"><a href="#1生成csv文件（在编译下目录里的1-、2、。。。里面每个用户一个）" class="headerlink" title="1生成csv文件（在编译下目录里的1 、2、。。。里面每个用户一个）"></a>1生成csv文件（在编译下目录里的1 、2、。。。里面每个用户一个）</h2><p> 1.1拍照 ，生成temp文件夹放入拍照的图片<br> 1.2加载人脸识别特征器，裁剪生成样本（50*60），生成1文件夹<br> 1.3生成CSV文件给人脸编号<br> 1.4生成user文件（前面编号，后面人名）</p><h2 id="2采样图片灰度化处理"><a href="#2采样图片灰度化处理" class="headerlink" title="2采样图片灰度化处理"></a>2采样图片灰度化处理</h2><h2 id="3直方图均衡"><a href="#3直方图均衡" class="headerlink" title="3直方图均衡"></a>3直方图均衡</h2><h2 id="4训练：-图片给模型训练器生成facemodel-xml文件"><a href="#4训练：-图片给模型训练器生成facemodel-xml文件" class="headerlink" title="4训练： 图片给模型训练器生成facemodel.xml文件"></a>4训练： 图片给模型训练器生成facemodel.xml文件</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ptr&lt;FaceRecognizer&gt; model = createEigenFaceRecognizer();</span><br><span class="line">model-&gt;train(images, labels);</span><br><span class="line">model-&gt;save(<span class="string">&quot;MyFacePCAModel.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="5人脸识别"><a href="#5人脸识别" class="headerlink" title="5人脸识别"></a>5人脸识别</h2><p> 5.1打开摄像头采集数据<br> 5.2使用人脸特征级联器—检测到人脸（特征提取，圈主人脸）<br> 5.3加载刚才训练的模型，进行人脸识别<br>通过csv\user.txt—显示用户名</p><h1 id="二实现函数"><a href="#二实现函数" class="headerlink" title="二实现函数"></a>二实现函数</h1><h2 id="修改文件地址"><a href="#修改文件地址" class="headerlink" title="修改文件地址"></a>修改文件地址</h2><p>1.mainwidows.cpp 134行/home/lixiao/opencv/opencv-3.4.5需要改成自己装opencv的位置<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> face_Classifier_name = <span class="string">&quot;/home/lixiao/opencv/opencv-3.4.5/data/haarcascades_cuda/haarcascade_frontalface_alt.xml&quot;</span>;</span><br></pre></td></tr></table></figure><br>2.mainwidows.cpp 26行登录界面的背景图片地址<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QPixmap <span class="title">logo</span><span class="params">(<span class="string">&quot;/home/lixiao/face/opencv.jpg&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><h2 id="修改圈住人脸的地方-172行"><a href="#修改圈住人脸的地方-172行" class="headerlink" title="修改圈住人脸的地方 172行"></a>修改圈住人脸的地方 172行</h2><p>mainwidows.cpp 172行<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//imshow(&quot;face&quot;, face[i]);</span></span><br><span class="line">               <span class="keyword">if</span> (faces[i].height &gt; <span class="number">0</span> &amp;&amp; faces[i].width &gt; <span class="number">0</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   face = gray(faces[i]);</span><br><span class="line">                   cv::rectangle(frame, faces[i], cv::Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">                   <span class="function">emit <span class="title">getQimage</span><span class="params">(frame)</span></span>;</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure></p><h2 id="打印名字（显示识别结果"><a href="#打印名字（显示识别结果" class="headerlink" title="打印名字（显示识别结果)"></a>打印名字（显示识别结果)</h2><p>mainwidows.cpp 217行<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QStringList <span class="built_in">list</span> = line.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                ui-&gt;lineEdit_user-&gt;setText(<span class="built_in">list</span>[<span class="number">1</span>]);<span class="comment">//显示识别结果的名字</span></span><br></pre></td></tr></table></figure><br>图片显示名字<br>mainwidows.cpp 217行下加入putText()<br>    参数point—文字显示的位置<br>        Scalar—颜色<br>        2—线的粗细<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putText(frame,<span class="built_in">list</span>[<span class="number">1</span>].toStdString(),Point(<span class="number">10</span>,<span class="number">50</span>),FONT_HERSHEY_SIMPLEX,<span class="number">2</span>,Scalar(<span class="number">128</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>,LINE_4);</span><br></pre></td></tr></table></figure></p><h2 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h2><p>方法<br>circle(img, center, radius, color, thickness, lineType, shift)<br>参数：<br>1、img:图像；<br>2、center：圆的中心。<br>3、radius：圆半径。<br>4、color：圆颜色或亮度（灰度图像）。<br>5、thickness：轮廓厚度。负值，填充。<br>6、lineType：线型。<br>7、shift：点坐标中小数位数的参数移位数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">newimage = (<span class="number">500</span>, <span class="number">500</span>, <span class="number">3</span>)</span><br><span class="line">image = np.zeros(newimage, np.uint8)</span><br><span class="line">cv2.circle(image, (<span class="number">150</span>,<span class="number">150</span>), <span class="number">100</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv2.circle(image, (<span class="number">300</span>,<span class="number">150</span>), <span class="number">50</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">-1</span>)</span><br><span class="line">cv2.imshow(&#x27;circle&#x27;, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h1 id="代码（节选）"><a href="#代码（节选）" class="headerlink" title="代码（节选）"></a>代码（节选）</h1><p>mainwindow.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/core.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/face.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/highgui.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/imgproc.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/imgproc/types_c.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/face/facerec.hpp&quot;</span></span></span><br><span class="line"><span class="comment">//#include &quot;opencv2/contrib/contrib.hpp&quot;</span></span><br><span class="line"><span class="comment">//#include&lt;face/face.hpp&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::face;</span><br><span class="line"><span class="comment">//using namespace cv;</span></span><br><span class="line"><span class="comment">// SVM;</span></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="function">QPixmap <span class="title">logo</span><span class="params">(<span class="string">&quot;/home/lixiao/face/opencv1.jpg&quot;</span>)</span></span>;</span><br><span class="line">    ui-&gt;label_video-&gt;setPixmap(logo);</span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(getQimage(cv::Mat&amp;)), <span class="keyword">this</span>, SLOT(showimage(cv::Mat&amp;)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::Sleep</span><span class="params">(<span class="keyword">int</span> msec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTime dieTime = QTime::currentTime().addMSecs(msec);</span><br><span class="line">       <span class="keyword">while</span>( QTime::currentTime() &lt; dieTime )</span><br><span class="line">           QCoreApplication::processEvents(QEventLoop::AllEvents, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::deldir</span><span class="params">(QString &amp;path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (path.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="function">QDir <span class="title">dir</span><span class="params">(path)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    dir.setFilter(QDir::AllEntries | QDir::NoDotAndDotDot);</span><br><span class="line">    QFileInfoList fileList = dir.entryInfoList();</span><br><span class="line">    foreach (QFileInfo fi, fileList)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fi.isFile())</span><br><span class="line">            fi.dir().remove(fi.fileName());</span><br><span class="line">        <span class="comment">//else</span></span><br><span class="line">        <span class="comment">//   ; //DeleteDirectory(fi.absoluteFilePath());</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//样本获取</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_pushButton_photo_sample_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PhotoIn = <span class="keyword">new</span> Dialogin(<span class="keyword">this</span>);</span><br><span class="line">    PhotoIn-&gt;setMaximumSize(QSize(<span class="number">670</span>,<span class="number">610</span>));</span><br><span class="line">    PhotoIn-&gt;setMinimumSize(QSize(<span class="number">670</span>,<span class="number">610</span>));</span><br><span class="line">    PhotoIn-&gt;show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模型训练开始识别</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_pushButton_train_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QMessageBox *startbox = <span class="keyword">new</span> QMessageBox(QMessageBox::Warning  ,<span class="string">&quot;信息&quot;</span>,<span class="string">&quot;开始训练请稍后！！！&quot;</span>,QMessageBox::NoButton,<span class="keyword">this</span>);<span class="comment">//界面对话框</span></span><br><span class="line">    startbox-&gt;show();</span><br><span class="line">    Sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="function">QFile <span class="title">csv</span><span class="params">(QDir::currentPath() + <span class="string">&quot;/csv.txt&quot;</span>)</span></span>;<span class="comment">//读取csv.txt文件</span></span><br><span class="line">    <span class="keyword">if</span>(!csv.open(QIODevice::ReadOnly | QIODevice::Text))</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; csv.errorString() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        startbox-&gt;close();</span><br><span class="line">        QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;错误&quot;</span>),tr(<span class="string">&quot;csv文件未找到！！！&quot;</span>),QMessageBox::Ok);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt;images;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;labels;</span><br><span class="line">    <span class="keyword">while</span>(!csv.atEnd())</span><br><span class="line">    &#123;</span><br><span class="line">        QString p = csv.readLine(<span class="number">128</span>);</span><br><span class="line">        QStringList qlist = p.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(qlist.size() == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            QString a =qlist[<span class="number">0</span>];</span><br><span class="line">            QByteArray b =  a.toLatin1();</span><br><span class="line">            <span class="keyword">char</span> *path = b.data();</span><br><span class="line">            <span class="comment">// char *path =  (qlist[0].toLatin1()).data();</span></span><br><span class="line">            <span class="keyword">int</span> tag = qlist[<span class="number">1</span>].mid(<span class="number">0</span>, <span class="number">1</span>).toInt();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> filepath =cv::format(path);</span><br><span class="line">            images.push_back(cv::imread(path, <span class="number">0</span>));</span><br><span class="line">            labels.push_back(tag);</span><br><span class="line">            qDebug()&lt;&lt; qlist.size() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(images.size() &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;错误&quot;</span>),tr(<span class="string">&quot;加载图片失败！！！&quot;</span>),QMessageBox::Ok);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   cv::Ptr&lt;face::FaceRecognizer&gt; model = EigenFaceRecognizer::create();</span><br><span class="line">   <span class="comment">//cv::Ptr&lt;FaceRecognizer&gt; model = EigenFaceRecognizer::create();</span></span><br><span class="line">    model-&gt;train(images, labels);</span><br><span class="line">    model-&gt;save(<span class="string">&quot;facemodel.xml&quot;</span>);</span><br><span class="line">    startbox-&gt;close();</span><br><span class="line">    QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;信息&quot;</span>),tr(<span class="string">&quot;恭喜模型训练完成！！！&quot;</span>),QMessageBox::Ok);</span><br><span class="line"><span class="comment">/**********************************/</span></span><br><span class="line">    <span class="keyword">double</span> confidence=<span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">int</span> predictedLabel=<span class="number">-1</span>;</span><br><span class="line">        CvCapture* capture = cvCaptureFromCAM(<span class="number">0</span>);    <span class="comment">//打开默认摄像头</span></span><br><span class="line">        cvSetCaptureProperty(capture, CV_CAP_PROP_FRAME_WIDTH, <span class="number">640</span>);</span><br><span class="line">        cvSetCaptureProperty(capture, CV_CAP_PROP_FRAME_HEIGHT, <span class="number">480</span>);</span><br><span class="line">        <span class="keyword">if</span> (capture == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;错误&quot;</span>),tr(<span class="string">&quot;摄像头打开失败&quot;</span>),QMessageBox::Ok);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        IplImage* frames;</span><br><span class="line">        cv::Mat frame;</span><br><span class="line">        cv::Mat gray;</span><br><span class="line">        cv::CascadeClassifier faceClassifier;</span><br><span class="line">        <span class="comment">//训练好的文件名称，放置在可执行文件同目录下</span></span><br><span class="line">        <span class="keyword">bool</span> flag =faceClassifier.load(<span class="string">&quot;/home/lixiao/opencv/opencv-3.4.5/data/haarcascades_cuda/haarcascade_frontalface_alt.xml&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;错误&quot;</span>),tr(<span class="string">&quot;不能加载haarcascade_frontalface_alt2.xml文件！！&quot;</span>),QMessageBox::Ok);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">QFile <span class="title">facemodel</span><span class="params">(QDir::currentPath() + <span class="string">&quot;/facemodel.xml&quot;</span>)</span></span>;<span class="comment">//寻找facemodel.xml</span></span><br><span class="line">        <span class="keyword">if</span>(!facemodel.open(QIODevice::ReadOnly | QIODevice::Text))</span><br><span class="line">        &#123;</span><br><span class="line">            qDebug() &lt;&lt; facemodel.errorString() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            cvReleaseCapture(&amp;capture);</span><br><span class="line">            QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;错误&quot;</span>),tr(<span class="string">&quot;facemodel.xml文件未找到！！！&quot;</span>),QMessageBox::Ok);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//model-&gt;predict(labels,predictedLabel,confidence);</span></span><br><span class="line">        stopflag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(stopflag == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(<span class="number">100</span>);</span><br><span class="line">            frames = cvQueryFrame( capture );</span><br><span class="line">            frame=cvarrToMat(frames);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect&gt; faces;</span><br><span class="line">            <span class="comment">//RGB转BGR格式</span></span><br><span class="line">            cv::cvtColor(frame, gray, CV_BGR2GRAY);</span><br><span class="line">            <span class="comment">//变换后的图像进行直方图均值化处理</span></span><br><span class="line">            cv::equalizeHist(gray, gray);</span><br><span class="line">            <span class="comment">//通过人脸分类器识别有多少人脸</span></span><br><span class="line">            faceClassifier.detectMultiScale(gray, faces, <span class="number">1.1</span>, <span class="number">2</span>, cv::CASCADE_FIND_BIGGEST_OBJECT|cv::CASCADE_DO_ROUGH_SEARCH, cv::Size(<span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line">            <span class="comment">//qDebug() &lt;&lt; &quot;faces.size =&quot; &lt;&lt; faces.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">            cv::Mat face;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; faces.size(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//imshow(&quot;face&quot;, face[i]);</span></span><br><span class="line">                <span class="keyword">if</span> (faces[i].height &gt; <span class="number">0</span> &amp;&amp; faces[i].width &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    face = gray(faces[i]);</span><br><span class="line"><span class="comment">//                    cv::rectangle(frame, faces[i], cv::Scalar(0, 0, 255), 1, 8, 0);</span></span><br><span class="line"><span class="comment">//                    emit getQimage(frame);</span></span><br><span class="line">                    <span class="function">Point <span class="title">center</span><span class="params">(faces[i].x + faces[i].width*<span class="number">0.5</span>, faces[i].y + faces[i].height*<span class="number">0.5</span>)</span></span>;</span><br><span class="line">                     cv::ellipse(frame, center,Size(faces[i].width*<span class="number">0.5</span>, faces[i].height*<span class="number">0.5</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">360</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                      <span class="function">emit <span class="title">getQimage</span><span class="params">(frame)</span></span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(faces.size() == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ui-&gt;lineEdit_confidence-&gt;clear();</span><br><span class="line">                ui-&gt;lineEdit_user-&gt;clear();</span><br><span class="line">                <span class="function">emit <span class="title">getQimage</span><span class="params">(frame)</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cv::Mat face_test;</span><br><span class="line">            <span class="keyword">if</span>((face.rows &gt; <span class="number">112</span>) || (face.cols &gt; <span class="number">92</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cv::resize(face, face_test, cv::Size(<span class="number">92</span>,<span class="number">112</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//int predictPCA = 0;</span></span><br><span class="line">            <span class="keyword">double</span> confidence=<span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!face_test.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//测试图像应该是灰度图</span></span><br><span class="line">                <span class="keyword">int</span> predictedLabel=<span class="number">-1</span>;</span><br><span class="line">                <span class="comment">//predictPCA = model-&gt;predict(face_test);</span></span><br><span class="line">                model-&gt;predict(face_test,predictedLabel,confidence);</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">&quot;=============================&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                ui-&gt;lineEdit_confidence-&gt;setText(QString::number(confidence));<span class="comment">//显示置信度</span></span><br><span class="line">    <span class="comment">//            qDebug() &lt;&lt; &quot;predictPCA =&quot; &lt;&lt; predictPCA &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//            qDebug()&lt;&lt;&quot;predictedLabel:&quot;&lt;&lt;predictedLabel;</span></span><br><span class="line">    <span class="comment">//            qDebug()&lt;&lt;&quot;confidence:&quot;&lt;&lt;confidence;</span></span><br><span class="line"></span><br><span class="line">                <span class="function">QFile <span class="title">user</span><span class="params">(QDir::currentPath() + <span class="string">&quot;/usr.txt&quot;</span>)</span></span>;</span><br><span class="line">                <span class="keyword">if</span>(!user.open(QIODevice::ReadWrite | QIODevice::Text))</span><br><span class="line">                &#123;</span><br><span class="line">                    qDebug() &lt;&lt; user.errorString() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                qint64 usrlinenum =<span class="number">0</span>;</span><br><span class="line">                <span class="comment">//usrlinenum=1;</span></span><br><span class="line">                QString line;</span><br><span class="line">                <span class="function">QTextStream <span class="title">in</span><span class="params">(&amp;user)</span></span>;</span><br><span class="line">                <span class="keyword">while</span>((!in.atEnd()) &amp;&amp; (usrlinenum &lt; predictedLabel) )</span><br><span class="line">                &#123;</span><br><span class="line">                   line = in.readLine();</span><br><span class="line">                   usrlinenum++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                QStringList <span class="built_in">list</span> = line.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                ui-&gt;lineEdit_user-&gt;setText(<span class="built_in">list</span>[<span class="number">1</span>]);<span class="comment">//显示识别结果的名字</span></span><br><span class="line">                ui-&gt;label_3-&gt;setText(<span class="built_in">list</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         cvReleaseCapture(&amp;capture);</span><br><span class="line">         <span class="function">QPixmap <span class="title">logo</span><span class="params">(QDir::currentPath() + <span class="string">&quot;/opencv.jpg&quot;</span>)</span></span>;</span><br><span class="line">         ui-&gt;label_video-&gt;setPixmap(logo);</span><br><span class="line">        <span class="comment">//startbox-&gt;close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::showimage</span><span class="params">(cv::Mat &amp;image)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat src = image ;</span><br><span class="line">    cvtColor( src, src, CV_BGR2RGB );</span><br><span class="line">    QImage img=QImage((<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>*)(src.data), src.cols, src.rows, QImage::Format_RGB888);</span><br><span class="line">    QPixmap pix = QPixmap::fromImage(img);</span><br><span class="line">    ui-&gt;label_video-&gt;setPixmap(pix);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//停止识别</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_pushButton_face_reco_stop_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     stopflag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清除数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_pushButton_clear_data_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString path = QDir::currentPath();</span><br><span class="line">    <span class="function">QFile <span class="title">facemodel</span><span class="params">(path + <span class="string">&quot;/facemodel.xml&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(facemodel.exists())</span><br><span class="line">    &#123;</span><br><span class="line">        facemodel.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">QFile <span class="title">csv</span><span class="params">(path + <span class="string">&quot;/csv.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(csv.exists())</span><br><span class="line">    &#123;</span><br><span class="line">        csv.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>dialogin.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;dialogin.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_dialogin.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/core.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/face.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/highgui.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/imgproc.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/imgproc/types_c.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::face;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Dialogin::Dialogin(QWidget *parent) :</span><br><span class="line">    QDialog(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::Dialogin)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    capture = <span class="literal">NULL</span>;</span><br><span class="line">     capture = cvCaptureFromCAM(<span class="number">0</span>);<span class="comment">//打开摄像头</span></span><br><span class="line"> <span class="comment">//设置视频获取属性 </span></span><br><span class="line">             cvSetCaptureProperty(capture, CV_CAP_PROP_FRAME_WIDTH, <span class="number">640</span>);<span class="comment">// 视频流的帧宽度（只对摄像头有效）</span></span><br><span class="line">             cvSetCaptureProperty(capture, CV_CAP_PROP_FRAME_HEIGHT, <span class="number">480</span>);<span class="comment">// 视频流的帧高度（只对摄像头有效）</span></span><br><span class="line">    setWindowFlags(windowFlags()&amp;~ Qt::WindowCloseButtonHint);<span class="comment">//窗口只有一个关闭按钮</span></span><br><span class="line">    <span class="comment">//gimage =NULL;</span></span><br><span class="line">   <span class="comment">// connect(this, SIGNAL(getimage(const QImage &amp;image)), this, SLOT(showimage(const QImage &amp;image)));</span></span><br><span class="line">    timer = <span class="keyword">new</span> QTimer(<span class="keyword">this</span>);</span><br><span class="line">    timer-&gt;setInterval(<span class="number">50</span>);</span><br><span class="line">    connect(timer, SIGNAL(timeout()), <span class="keyword">this</span>, SLOT(showimage()));</span><br><span class="line">    timer-&gt;start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dialogin::~Dialogin()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dialogin::Sleep</span><span class="params">(<span class="keyword">int</span> msec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTime dieTime = QTime::currentTime().addMSecs(msec);</span><br><span class="line">       <span class="keyword">while</span>( QTime::currentTime() &lt; dieTime )</span><br><span class="line">           QCoreApplication::processEvents(QEventLoop::AllEvents, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始拍照</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dialogin::on_pushButton_photo_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// qDebug() &lt;&lt; ui-&gt;pushButton_photo-&gt;text() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ui-&gt;lineEdit_name-&gt;text() == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;错误&quot;</span>),tr(<span class="string">&quot;请输入姓名&quot;</span>),QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(capture == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::warning(<span class="keyword">this</span>, tr(<span class="string">&quot;警告！！！&quot;</span>), tr(<span class="string">&quot;摄像头打不开！！！！&quot;</span>), QMessageBox::Abort);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        QDir *path = <span class="keyword">new</span> QDir;</span><br><span class="line">        <span class="keyword">bool</span> exist = path-&gt;exists(QDir::currentPath() + <span class="string">&quot;/TEMP&quot;</span>);<span class="comment">//把拍完照的图片保存到TEMP目录下</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!exist)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> ok = path-&gt;mkdir(QDir::currentPath() + <span class="string">&quot;/TEMP&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(ok)</span><br><span class="line">            &#123;</span><br><span class="line">                QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;创建文件夹&quot;</span>),tr(<span class="string">&quot;文件夹创建成功！&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        QString temp =  QDir::currentPath() + <span class="string">&quot;/TEMP/%d.jpg&quot;</span>;<span class="comment">//照片的数量</span></span><br><span class="line">        <span class="keyword">char</span> * path_src;</span><br><span class="line">        QByteArray ba= temp.toLatin1();</span><br><span class="line">        path_src = ba.data();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        frames = cvQueryFrame( capture );<span class="comment">//函数cvQueryFrame从摄像头或者文件中抓取一帧，然后解压并返回这一帧</span></span><br><span class="line">        frame=cvarrToMat(frames); <span class="comment">//格式转换否则无法正常显示图片</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> filename = cv::format(path_src, i);</span><br><span class="line">        ui-&gt;pushButton_photo-&gt;setText(QString::number(i+<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line">        imwrite(filename, frame);</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始取样</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dialogin::on_pushButton_start_photo_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QMessageBox *startbox = <span class="keyword">new</span> QMessageBox(QMessageBox::Warning  ,<span class="string">&quot;信息&quot;</span>,<span class="string">&quot;开始取样请稍后！！！&quot;</span>,QMessageBox::NoButton,<span class="keyword">this</span>);<span class="comment">//对话框的交互</span></span><br><span class="line">    startbox-&gt;show();</span><br><span class="line">    Sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="function">QFile <span class="title">user</span><span class="params">(QDir::currentPath() + <span class="string">&quot;/usr.txt&quot;</span>)</span></span>;<span class="comment">//保存照片的名字</span></span><br><span class="line">    <span class="keyword">if</span>(!user.open(QIODevice::ReadWrite | QIODevice::Text))</span><br><span class="line">    &#123;</span><br><span class="line">        startbox-&gt;close();</span><br><span class="line">        qDebug() &lt;&lt; user.errorString() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    qint64 usrlinenum =<span class="number">0</span>;</span><br><span class="line">    usrlinenum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!user.atEnd())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">        qint64 c = user.readLine(buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(c &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            usrlinenum++;</span><br><span class="line">            qDebug() &lt;&lt; buf &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c &lt;<span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            startbox-&gt;close();</span><br><span class="line">            QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;文件读取&quot;</span>),tr(<span class="string">&quot;文件读取失败！！！&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// qDebug() &lt;&lt; QString::number(i, 10) &lt;&lt;endl;</span></span><br><span class="line">    QString usrline = QString::number(usrlinenum, <span class="number">10</span>)  + <span class="string">&quot;;&quot;</span> +  ui-&gt;lineEdit_name-&gt;text() + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    qDebug() &lt;&lt; usrline &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> * p;</span><br><span class="line">    QByteArray buf = usrline.toLatin1();</span><br><span class="line">    p = buf.data();</span><br><span class="line">    user.write(p);</span><br><span class="line">    user.close();</span><br><span class="line"></span><br><span class="line">    QDir *pathdata = <span class="keyword">new</span> QDir;</span><br><span class="line">    <span class="keyword">bool</span> exist = pathdata-&gt;exists(QDir::currentPath() + <span class="string">&quot;/&quot;</span> +QString::number(usrlinenum, <span class="number">10</span>) );</span><br><span class="line">    <span class="keyword">if</span>(!exist)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> ok =  pathdata-&gt;mkdir(QDir::currentPath() + <span class="string">&quot;/&quot;</span> +QString::number(usrlinenum, <span class="number">10</span>));</span><br><span class="line">        <span class="keyword">if</span>(!ok)</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;创建文件夹失败&quot;</span>),tr(<span class="string">&quot;文件夹创建失败！&quot;</span>));</span><br><span class="line">            startbox-&gt;close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    QString pathdst = QDir::currentPath() + <span class="string">&quot;/&quot;</span> +QString::number(usrlinenum, <span class="number">10</span>) + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="comment">/*********************************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    cv::CascadeClassifier face_Classifier;   <span class="comment">//定义人脸分类器</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> face_Classifier_name = <span class="string">&quot;/home/lixiao/opencv/opencv-3.4.5/data/haarcascades_cuda/haarcascade_frontalface_alt.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect&gt; face_rect;</span><br><span class="line">    cv::Mat dst_gray;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!face_Classifier.load(face_Classifier_name))<span class="comment">//加载文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        startbox-&gt;close();</span><br><span class="line">        QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;错误&quot;</span>),tr(<span class="string">&quot;haarcascade_frontalface_alt.xml加载失败&quot;</span>),QMessageBox::Ok);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    QString dst_path = pathdst + <span class="string">&quot;%d.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">QDir <span class="title">dir</span><span class="params">(QDir::currentPath() + <span class="string">&quot;/TEMP/&quot;</span>)</span></span>;</span><br><span class="line">    QStringList dst_file_name;</span><br><span class="line">    dst_file_name &lt;&lt; <span class="string">&quot;*.jpg&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    QFileInfoList <span class="built_in">list</span> = dir.entryInfoList(dst_file_name, QDir::Files|QDir::Readable, QDir::Name);</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; <span class="built_in">list</span>.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> * path_dst;</span><br><span class="line">    QByteArray dsttemp= dst_path.toLatin1();</span><br><span class="line">    path_dst = dsttemp.data();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>;z&lt; <span class="built_in">list</span>.size();z++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> *  path_list_src ;</span><br><span class="line"></span><br><span class="line">        QByteArray dsttemp=  <span class="built_in">list</span>[z].absoluteFilePath().toLatin1();</span><br><span class="line">        path_list_src = dsttemp.data();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> srcfile = cv::format(path_list_src);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> dstfile = cv::format( path_dst, z);</span><br><span class="line">        cv::Mat srcframe = cv::imread(srcfile);</span><br><span class="line">        cv::cvtColor(srcframe, dst_gray, cv::COLOR_BGR2GRAY);</span><br><span class="line">        cv::equalizeHist(dst_gray, dst_gray);</span><br><span class="line"><span class="comment">//人脸检测</span></span><br><span class="line">        face_Classifier.detectMultiScale(dst_gray,  face_rect, <span class="number">1.1</span>, <span class="number">3</span>, CV_HAAR_DO_ROUGH_SEARCH, cv::Size(<span class="number">30</span>, <span class="number">30</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)face_rect.size(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cv::Mat faceROI = srcframe(face_rect[j]);</span><br><span class="line">            cv::Mat MyFace;</span><br><span class="line">            cv::Mat gray_MyFace;</span><br><span class="line">            <span class="keyword">if</span> (faceROI.cols &gt; <span class="number">100</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cv::resize(faceROI, MyFace, cv::Size(<span class="number">92</span>, <span class="number">112</span>));</span><br><span class="line">                cv::cvtColor(MyFace, gray_MyFace, CV_BGR2GRAY);</span><br><span class="line">                imwrite(dstfile, gray_MyFace);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/***********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*当我们写人脸模型的训练程序的时候，我们需要读取人脸和人脸对应的标签。直接在数据库中读取显然是低效的。所以我们用csv文件读取*/</span></span><br><span class="line">    <span class="function">QFile <span class="title">csv</span><span class="params">(QDir::currentPath() + <span class="string">&quot;/csv.txt&quot;</span>)</span></span>;<span class="comment">//写入csv.txt文件</span></span><br><span class="line">    <span class="keyword">if</span>(!csv.open(QIODevice::WriteOnly | QIODevice::Append | QIODevice::Text))</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; csv.errorString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        startbox-&gt;close();</span><br><span class="line">        QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;错误&quot;</span>),tr(<span class="string">&quot;无法创建csv文件！！！&quot;</span>),QMessageBox::Ok);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">QDir <span class="title">dst_file_dir</span><span class="params">(pathdst)</span></span>;</span><br><span class="line">    QStringList dst_file_filter;</span><br><span class="line">    dst_file_filter &lt;&lt;  <span class="string">&quot;*.jpg&quot;</span> ;</span><br><span class="line">    QFileInfoList dst_file_list_path = dst_file_dir.entryInfoList(dst_file_filter, QDir::Files | QDir::Readable, QDir::Name);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;dst_file_list_path.size(); x++)</span><br><span class="line">    &#123;</span><br><span class="line">        csv.write(QString(dst_file_list_path[x].absoluteFilePath() + <span class="string">&quot;;&quot;</span> + QString::number(usrlinenum, <span class="number">10</span>) + <span class="string">&quot;\r\n&quot;</span>).toLatin1());</span><br><span class="line">    &#125;</span><br><span class="line">    startbox-&gt;close();</span><br><span class="line">    QMessageBox::warning(<span class="keyword">this</span>,tr(<span class="string">&quot;信息&quot;</span>),tr(<span class="string">&quot;取样已经完成、csv文件完创建成！！！&quot;</span>),QMessageBox::Ok);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭采样界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dialogin::on_pushButton_close_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ui-&gt;lineEdit_name-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">    ui-&gt;pushButton_start_photo-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">    ui-&gt;lineEdit_name-&gt;clear();</span><br><span class="line">    <span class="keyword">if</span>(capture != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cvReleaseCapture(&amp;capture);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dialogin::showimage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(capture != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        IplImage* pBinary;</span><br><span class="line">        cv::Mat src ;</span><br><span class="line">        pBinary = cvQueryFrame( capture );<span class="comment">//函数cvQueryFrame从摄像头或者文件中抓取一帧，然后解压并返回这一帧</span></span><br><span class="line">        src=cvarrToMat(pBinary);</span><br><span class="line">        <span class="comment">//格式转换否则无法正常显示图片</span></span><br><span class="line">        cvtColor( src, src, CV_BGR2RGB );<span class="comment">//将图像从一个颜色空间转换到另一个颜色空间的转换</span></span><br><span class="line"></span><br><span class="line">        QImage img=QImage((<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>*)(src.data), src.cols, src.rows, QImage::Format_RGB888);</span><br><span class="line"></span><br><span class="line">        QPixmap pix = QPixmap::fromImage(img);<span class="comment">//用来对图片进行预处理</span></span><br><span class="line">        ui-&gt;label_video-&gt;setPixmap(pix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>源码资料<br>链接：<a href="https://pan.baidu.com/s/1Rol3vv-ERg4fulwcshF1Yg?pwd=k7xx">https://pan.baidu.com/s/1Rol3vv-ERg4fulwcshF1Yg?pwd=k7xx</a><br>提取码：k7xx</p>]]></content>
      
      
      <categories>
          
          <category> 实训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="blog/linux/"/>
      <url>blog/linux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.命令问题</p><ul><li>1.<a href="https://www.jianshu.com/p/06f8b31a90e6">Linux sed在某一行前面、后面追加</a></li></ul><p>2.源码</p><ul><li>1.<a href="https://1541812541.github.io/linux-ros">ros自动创建文件脚本</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工具</title>
      <link href="blog/tools/"/>
      <url>blog/tools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.学习类</p><ul><li>1.<a href="https://markdown.com.cn">Markdown语法</a></li><li>2.<a href="https://www.ldoceonline.com/">朗文词典</a></li><li>3.<a href="https://www.macmillandictionary.com/">麦克米伦词典</a></li><li>4.<a href="https://www.qtool.net/colorsize">颜色转换工具</a></li><li>5.<a href="https://airmore.cn/video-to-gif-online">在线视频转gif工具</a></li><li>6.<a href="https://imgtu.com">图床</a></li><li>7.<a href="https://zhuanlan.zhihu.com/p/391195241">windos关闭自动更新</a></li><li>8.<a href="https://www.bilibili.com/video/BV1sK411Q7S7/?spm_id_from=333.788&amp;vd_source=58a378a1355c6a1143efc8069e63155c">图床魔改</a></li></ul><p>2.娱乐类</p><ul><li>1.<a href="https://www.4399.com/flash/112689.htm#search3-e5f8">皇城突袭无敌版</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>视频网址</title>
      <link href="blog/videos/"/>
      <url>blog/videos/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>视频网址</p>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试页面</title>
      <link href="blog/done/"/>
      <url>blog/done/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>如果你看到此页面，说明你已成功运行并部署此网站。</p><p><img src="1.jpg" alt=""></p><p>你可以查看，以下文档进行自定义设置。</p><blockquote><p>网站修改配置文档：</p></blockquote><a class="btn-beautify button--animated " href="https://guguge.gitee.io/blog/butterfly"   title="链接1"><i class="fas fa-download"></i><span>链接1</span></a><a class="btn-beautify button--animated " href="https://guguge.top/blog/butterfly"   title="链接2"><i class="fas fa-download"></i><span>链接2</span></a><hr><blockquote><p>文章书写格式参考文档：</p></blockquote><a class="btn-beautify button--animated " href="https://guguge.gitee.io/blog/markdown"   title="链接1"><i class="fas fa-download"></i><span>链接1</span></a><a class="btn-beautify button--animated " href="https://guguge.top/blog/markdown"   title="链接2"><i class="fas fa-download"></i><span>链接2</span></a>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
